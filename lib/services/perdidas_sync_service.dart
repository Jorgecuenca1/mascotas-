import 'dart:async';
import 'database_service_web.dart';
import 'perdidas_service.dart';
import 'connectivity_service.dart';

class PerdidasSyncService {
  static final PerdidasSyncService _instance = PerdidasSyncService._internal();
  factory PerdidasSyncService() => _instance;
  PerdidasSyncService._internal();

  final DatabaseService _databaseService = DatabaseService();
  final ConnectivityService _connectivityService = ConnectivityService();
  Timer? _syncTimer;
  bool _isSyncing = false;

  void startAutoSync() {
    // Detener timer anterior si existe
    stopAutoSync();
    
    // Sincronizar inmediatamente
    syncPendingData();
    
    // Configurar sincronizaci√≥n cada 30 segundos
    _syncTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      syncPendingData();
    });

    // Escuchar cambios de conectividad
    _connectivityService.initConnectivityListener((bool isOnline) {
      if (isOnline) {
        print('üì° Conexi√≥n detectada, sincronizando p√©rdidas...');
        syncPendingData();
      }
    });
  }

  void stopAutoSync() {
    _syncTimer?.cancel();
    _syncTimer = null;
  }

  Future<void> syncPendingData() async {
    if (_isSyncing) {
      print('‚è≥ Sincronizaci√≥n ya en progreso, saltando...');
      return;
    }

    _isSyncing = true;

    try {
      bool hasConnection = await _connectivityService.hasConnection();
      
      if (!hasConnection) {
        print('üìµ Sin conexi√≥n, no se puede sincronizar');
        return;
      }

      // Sincronizar p√©rdidas pendientes
      await _syncPerdidas();
      
      // Tambi√©n sincronizar responsables y mascotas si es necesario
      await _syncResponsables();
      await _syncMascotas();
      
    } catch (e) {
      print('‚ùå Error durante sincronizaci√≥n: $e');
    } finally {
      _isSyncing = false;
    }
  }

  Future<void> _syncPerdidas() async {
    try {
      List<Map<String, dynamic>> perdidasPendientes = 
          await _databaseService.obtenerPerdidasNoSincronizadas();
      
      if (perdidasPendientes.isEmpty) {
        print('‚úÖ No hay p√©rdidas pendientes de sincronizar');
        return;
      }

      print('üì§ Sincronizando ${perdidasPendientes.length} p√©rdidas...');
      
      for (var perdida in perdidasPendientes) {
        try {
          await PerdidasService.registrarPerdida(perdida);
          
          // Marcar como sincronizada
          if (perdida['uuid_local'] != null) {
            await _databaseService.marcarPerdidaComoSincronizada(
              perdida['uuid_local'].toString()
            );
            print('‚úÖ P√©rdida ${perdida['uuid_local']} sincronizada');
          }
        } catch (e) {
          print('‚ùå Error sincronizando p√©rdida ${perdida['uuid_local']}: $e');
        }
      }
    } catch (e) {
      print('‚ùå Error obteniendo p√©rdidas pendientes: $e');
    }
  }

  Future<void> _syncResponsables() async {
    try {
      List<Map<String, dynamic>> responsablesPendientes = 
          await _databaseService.obtenerResponsablesNoSincronizados();
      
      if (responsablesPendientes.isEmpty) {
        return;
      }

      print('üì§ Sincronizando ${responsablesPendientes.length} responsables...');
      
      // Aqu√≠ implementar√≠as la sincronizaci√≥n de responsables
      // Similar a como se hace con las p√©rdidas
      
    } catch (e) {
      print('‚ùå Error sincronizando responsables: $e');
    }
  }

  Future<void> _syncMascotas() async {
    try {
      List<Map<String, dynamic>> mascotasPendientes = 
          await _databaseService.obtenerMascotasNoSincronizadas();
      
      if (mascotasPendientes.isEmpty) {
        return;
      }

      print('üì§ Sincronizando ${mascotasPendientes.length} mascotas...');
      
      // Aqu√≠ implementar√≠as la sincronizaci√≥n de mascotas
      // Similar a como se hace con las p√©rdidas
      
    } catch (e) {
      print('‚ùå Error sincronizando mascotas: $e');
    }
  }

  Future<Map<String, int>> getPendingCounts() async {
    try {
      final perdidas = await _databaseService.obtenerPerdidasNoSincronizadas();
      final responsables = await _databaseService.obtenerResponsablesNoSincronizados();
      final mascotas = await _databaseService.obtenerMascotasNoSincronizadas();
      
      return {
        'perdidas': perdidas.length,
        'responsables': responsables.length,
        'mascotas': mascotas.length,
        'total': perdidas.length + responsables.length + mascotas.length,
      };
    } catch (e) {
      print('Error obteniendo conteos pendientes: $e');
      return {
        'perdidas': 0,
        'responsables': 0,
        'mascotas': 0,
        'total': 0,
      };
    }
  }
}